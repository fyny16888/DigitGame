{
  "name": "pomelo-admin",
  "version": "0.4.5",
  "private": false,
  "dependencies": {
    "pomelo-scheduler": "0.3.8",
    "pomelo-monitor": "0.3.7",
    "socket.io": "0.9.16",
    "socket.io-client": "0.9.16",
    "heapdump": "0.3.7"
  },
  "peerDependencies": {
    "pomelo-logger": "0.1.7"
  },
  "devDependencies": {
    "should": ">=0.0.1",
    "mocha": ">=0.0.1",
    "flow": ">=0.0.1"
  },
  "gitHead": "0a1886497e5bd2d45345638647ebc656473931cc",
  "readme": "#pomelo-admin\r\n\r\n`pomelo-admin` is an admin console library for [pomelo](https://github.com/NetEase/pomelo). It provides the a series of utilities to monitor the `pomelo` server clusters.\r\n\r\n##Installation\r\n\r\n```\r\nnpm install pomelo-admin\r\n```\r\n\r\n##Basic conception\r\n\r\n###Process roles\r\n\r\nThere are three process roles in `pomelo-admin`: master, monitor and client.\r\n\r\n+ master - the master server process, collects and maintains all the client and monitor status and exports the cluster status for the clients.  \r\n\r\n+ monitor - monitor proxy, in every server process which needs to be monitored. It should be started during the process starts and registers itself to the master server and reports the monitored process status to the master. \r\n\r\n+ client - `pomelo-admin` client process that fetches the status from master server, such as [pomelo-admin-web](https://github.com/NetEase/pomelo-admin-web) and [pomelo-cli](https://github.com/NetEase/pomelo-cli).\r\n\r\n###Message types\r\n\r\nThere are two message types of the communication between processes.\r\n\r\n+ request - bidirectional message that cooperated with response.\r\n\r\n+ notify - unidirectional message.\r\n\r\n##Components\r\n\r\n###ConsoleService \r\n\r\nMain service of `pomelo-admin` that runs in both master and monitor processes. It maintains the master agent or monitor agent for the process, loads the registed modules and provides the messages routing service for the messages from other processes.\r\n\r\n###MasterAgent  \r\n\r\n`pomelo-admin` agent that runs on the master process to provide the basic network communication and protocol encoding and decoding.\r\n\r\n###MonitorAgent  \r\n\r\n`pomelo-admin` agent that runs on the monitor process to provide the basic network communication and protocol encoding and decoding. \r\n\r\n###Module  \r\n \r\nModule is the place to implement the monitor logic, such as process status collecting. Developer can register modules in `pomelo-admin` to customize all kinds of system monitors.\r\n\r\nThere are three optional callback functions in each module.\r\n\r\n* function masterHandler(agent, msg, cb) - callback in master process to process a message from monitor process or a timer event in master process.\r\n\r\n* function monitorHandler(agent, msg, cb) - callback in monitor process to process a message from master process or a timer event in monitor process.\r\n\r\n* function clientHandler(agent, msg, cb) - callback in master process to process a message from client.\r\n\r\nThe relations of the components is as below:\r\n\r\n<center>\r\n![pomelo-admin-arch](http://pomelo.netease.com/resource/documentImage/pomelo-admin-arch.png)\r\n</center>\r\n\r\n##Usage\r\n\r\n```javascript\r\nvar admin = require(\"pomelo-admin\");\r\n```\r\n\r\nCreate a consoleService instance in master process.\r\n\r\n```javascript\r\nvar masterConsole = admin.createMasterConsole({  \r\n    port: masterPort  \r\n});  \r\n```\r\n\r\nRegister an admin module.\r\n\r\n```javascript\r\nmasterConsole.register(moduleId, module);  \r\n```\r\n\r\nStart masterConsole.\r\n\r\n```javascript\r\nmasterConsole.start(function(err) {  \r\n  // start servers  \r\n});  \r\n```\r\n\r\nCreate a consoleService instance in monitor process. \r\n\r\n```javascript\r\nvar monitorConsole = admin.createMonitorConsole({  \r\n    id: serverId,  \r\n    type: serverType,  \r\n    host: masterInfo.host,  \r\n    port: masterInfo.port,  \r\n    info: serverInfo  \r\n}); \r\n```\r\n\r\n##Customized modules  \r\n\r\nDevelopers can customize modules to collect and export additional status as they need.\r\n\r\n###Simple example  \r\n\r\n```javascript\r\nvar Module = function(app, opts) {\r\n  opts = opts || {};\r\n  this.type = opts.type || 'pull';  // pull or push \r\n  this.interval = opts.interval || 5; // pull or push interval\r\n};\r\n\r\nModule.moduleId = 'helloPomelo';\r\n\r\nmodule.exports = Module;\r\n\r\nModule.prototype.monitorHandler = function(agent, msg) {\r\n  var word = agent.id + ' hello pomelo';\r\n  // notify admin messages to master\r\n  agent.notify(Module.moduleId, {serverId: agent.id, body: word});\r\n};\r\n\r\nModule.prototype.masterHandler = function(agent, msg) {\r\n  // if no message, then notify all monitors to fetch datas\r\n  if(!msg) {\r\n    agent.notifyAll(Module.moduleId);\r\n    return;\r\n  }\r\n  // collect data from monitor\r\n  var data = agent.get(Module.moduleId);\r\n  if(!data) {\r\n    data = {};\r\n    agent.set(Module.moduleId, data);\r\n  }\r\n\r\n  data[msg.serverId] = msg;\r\n};\r\n\r\nModule.prototype.clientHandler = function(agent, msg, cb) {\r\n  // deal with client request,directly return data cached in master\r\n  cb(null, agent.get(Module.moduleId) || {});\r\n};\r\n```\r\n\r\n###Register customized modules\r\n\r\nyou must register your customized modules to pomelo to make it work.  \r\nwrite in app.js which is in your project's root directory  \r\n\r\n```javascript\r\napp.configure('production|development', function() {\r\n  app.registerAdmin('helloPomelo',new helloPomelo());\r\n});\r\n```\r\n\r\n##User level control  \r\npomelo-admin defines user level for admin client to login master server in this schema  \r\n```javascript\r\n{\r\n    \"id\": \"user-1\",\r\n    \"username\": \"admin\",\r\n    \"password\": \"admin\",\r\n    \"level\": 1\r\n}\r\n```\r\n\r\n**level** defines the user admin level  \r\nlevel 1 means the user has the admin permission, this user can do anything  \r\nother level user will have limited permission  \r\ncurrently **add**, **stop**, **kill** will require level 1 permission  \r\n\r\n**note**: by default you should provide adminUser.json file under the **config** dir  \r\nadminUser.json\r\n```\r\n[{\r\n    \"id\": \"user-1\",\r\n    \"username\": \"admin\",\r\n    \"password\": \"admin\",\r\n    \"level\": 1\r\n}, {\r\n    \"id\": \"user-2\",\r\n    \"username\": \"monitor\",\r\n    \"password\": \"monitor\",\r\n    \"level\": 2\r\n},{\r\n    \"id\": \"user-3\",\r\n    \"username\": \"test\",\r\n    \"password\": \"test\",\r\n    \"level\": 2\r\n}\r\n]\r\n```\r\n\r\n##Self-defined auth \r\npomelo-admin provides a simple auth function in [pomelo-admin auth](https://github.com/NetEase/pomelo-admin/blob/master/lib/util/utils.js#L78)  \r\ndevelopers can provide self-defined auth in pomelo by  \r\nin master server\r\n```javascript\r\napp.set('adminAuthUser', function(msg, cb){\r\n  if(auth success) {\r\n    cb(user);\r\n  } else {\r\n    cb(null);\r\n  }\r\n})\r\n```\r\n\r\n##Server master auth  \r\nserver connect to master with authorization  \r\npomelo-admin provides a simple auth function in [pomelo-admin auth](https://github.com/NetEase/pomelo-admin/blob/master/lib/util/utils.js#L117)  \r\ndevelopers can provide self-defined auth in pomelo by  \r\nin master server\r\n```javascript\r\napp.set('adminAuthServerMaster', function(msg, cb){\r\n  if(auth success) {\r\n    cb('ok');\r\n  } else {\r\n    cb('bad');\r\n  }\r\n})\r\n```\r\n\r\nin monitor server\r\n```javascript\r\napp.set('adminAuthServerMonitor', function(msg, cb){\r\n  if(auth success) {\r\n    cb('ok');\r\n  } else {\r\n    cb('bad');\r\n  }\r\n})\r\n```\r\n\r\n**note**: by default you should provide adminServer.json file under the **config** dir  \r\nadminServer.json\r\n```\r\n[{\r\n    \"type\": \"connector\",\r\n    \"token\": \"agarxhqb98rpajloaxn34ga8xrunpagkjwlaw3ruxnpaagl29w4rxn\"\r\n}, {\r\n    \"type\": \"chat\",\r\n    \"token\": \"agarxhqb98rpajloaxn34ga8xrunpagkjwlaw3ruxnpaagl29w4rxn\"\r\n},{\r\n    \"type\": \"gate\",\r\n    \"token\": \"agarxhqb98rpajloaxn34ga8xrunpagkjwlaw3ruxnpaagl29w4rxn\"\r\n}\r\n]\r\n```\r\n\r\n**type** is the serverType, **token** is a string you can genrate by yourself  \r\nwhen using in pomelo, you should fill all your servers with type:token  \r\n\r\n###Notes  \r\n\r\n`pomelo-admin` provides a series of useful system modules by default. But most of them are turned off by default. Add a simple line of code in `app.js` as below to enable them.\r\n\r\n```javascript\r\napp.configure('development', function() {\r\n  // enable the system monitor modules\r\n  app.enable('systemMonitor');\r\n});\r\n```\r\n",
  "readmeFilename": "README.md",
  "description": "`pomelo-admin` is an admin console library for [pomelo](https://github.com/NetEase/pomelo). It provides the a series of utilities to monitor the `pomelo` server clusters.",
  "_id": "pomelo-admin@0.4.5",
  "_shasum": "98191a52c7a84bff60773299a514c3a69b8e90f9",
  "_from": "rain1017/pomelo-admin",
  "_resolved": "git://github.com/rain1017/pomelo-admin.git#0a1886497e5bd2d45345638647ebc656473931cc"
}
